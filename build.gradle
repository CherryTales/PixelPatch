buildscript {
    repositories {
        mavenCentral()
        maven { url "https://files.minecraftforge.net/maven" }
        maven { url "https://jitpack.io/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath('com.github.ReplayMod:ForgeGradle:48c4f0c6c7:all')
        classpath('com.github.LXGaming:MixinGradle:0.6-SNAPSHOT')
    }
}
plugins {
    id "net.kyori.indra" version "2.0.6"
    id "net.kyori.indra.checkstyle" version "2.0.6"
    id "net.kyori.indra.git" version "2.0.6"
    id "net.kyori.blossom" version "1.3.0"
}
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

version = "1.0.0"
group = "com.cherrytales.pixelpatch"
archivesBaseName = "PixelPatch"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility =
        targetCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = '1.8.9-11.15.1.2318-1.8.9'
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dpatcher.debugBytecode=true", "-Dmixin.debug.verbose=true", "-Dmixin.debug.export=true", "-Dmixin.dumpTargetOnFailure=true"]
    clientRunArgs += ["--mixin patcher.mixins.json"]
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    embed ('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.embed
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    manifest {
        attributes "ModSide": "CLIENT",
                "FMLCorePluginContainsFMLMod": "true",
                "TweakOrder": "0",
                "MixinConfigs": "pixelpatch.mixins.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "ForceLoadAsMod": "true"
    }
}

blossom {
    String mainForgeClass = "src/main/java/com/cherrytales/pixelpatch/PixelPatchForge.java"
    replaceToken("@pixelpatch-version@", project.version, mainForgeClass)
}